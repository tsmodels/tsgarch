// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// garchfilter
NumericVector garchfilter(NumericVector residuals, NumericVector v, NumericVector initstate, NumericVector omega, NumericVector alpha, NumericVector beta, IntegerVector model);
RcppExport SEXP _tsgarch_garchfilter(SEXP residualsSEXP, SEXP vSEXP, SEXP initstateSEXP, SEXP omegaSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type residuals(residualsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initstate(initstateSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type model(modelSEXP);
    rcpp_result_gen = Rcpp::wrap(garchfilter(residuals, v, initstate, omega, alpha, beta, model));
    return rcpp_result_gen;
END_RCPP
}
// egarchfilter
NumericVector egarchfilter(NumericVector residuals, NumericVector v, NumericVector initstate, NumericVector omega, NumericVector alpha, NumericVector gamma, NumericVector beta, NumericVector kappa, IntegerVector model);
RcppExport SEXP _tsgarch_egarchfilter(SEXP residualsSEXP, SEXP vSEXP, SEXP initstateSEXP, SEXP omegaSEXP, SEXP alphaSEXP, SEXP gammaSEXP, SEXP betaSEXP, SEXP kappaSEXP, SEXP modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type residuals(residualsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initstate(initstateSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type model(modelSEXP);
    rcpp_result_gen = Rcpp::wrap(egarchfilter(residuals, v, initstate, omega, alpha, gamma, beta, kappa, model));
    return rcpp_result_gen;
END_RCPP
}
// aparchfilter
NumericVector aparchfilter(NumericVector residuals, NumericVector v, NumericVector initstate, NumericVector omega, NumericVector alpha, NumericVector gamma, NumericVector beta, NumericVector delta, IntegerVector model);
RcppExport SEXP _tsgarch_aparchfilter(SEXP residualsSEXP, SEXP vSEXP, SEXP initstateSEXP, SEXP omegaSEXP, SEXP alphaSEXP, SEXP gammaSEXP, SEXP betaSEXP, SEXP deltaSEXP, SEXP modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type residuals(residualsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initstate(initstateSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type model(modelSEXP);
    rcpp_result_gen = Rcpp::wrap(aparchfilter(residuals, v, initstate, omega, alpha, gamma, beta, delta, model));
    return rcpp_result_gen;
END_RCPP
}
// gjrgarchfilter
NumericVector gjrgarchfilter(NumericVector residuals, NumericVector negative_indicator, NumericVector v, NumericVector initstate, NumericVector omega, NumericVector alpha, NumericVector gamma, NumericVector beta, IntegerVector model);
RcppExport SEXP _tsgarch_gjrgarchfilter(SEXP residualsSEXP, SEXP negative_indicatorSEXP, SEXP vSEXP, SEXP initstateSEXP, SEXP omegaSEXP, SEXP alphaSEXP, SEXP gammaSEXP, SEXP betaSEXP, SEXP modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type residuals(residualsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type negative_indicator(negative_indicatorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initstate(initstateSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type model(modelSEXP);
    rcpp_result_gen = Rcpp::wrap(gjrgarchfilter(residuals, negative_indicator, v, initstate, omega, alpha, gamma, beta, model));
    return rcpp_result_gen;
END_RCPP
}
// fgarchfilter
NumericVector fgarchfilter(NumericVector residuals, NumericVector v, NumericVector initstate, NumericVector omega, NumericVector alpha, NumericVector gamma, NumericVector eta, NumericVector beta, NumericVector delta, IntegerVector model);
RcppExport SEXP _tsgarch_fgarchfilter(SEXP residualsSEXP, SEXP vSEXP, SEXP initstateSEXP, SEXP omegaSEXP, SEXP alphaSEXP, SEXP gammaSEXP, SEXP etaSEXP, SEXP betaSEXP, SEXP deltaSEXP, SEXP modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type residuals(residualsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initstate(initstateSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type model(modelSEXP);
    rcpp_result_gen = Rcpp::wrap(fgarchfilter(residuals, v, initstate, omega, alpha, gamma, eta, beta, delta, model));
    return rcpp_result_gen;
END_RCPP
}
// cgarchfilter
Rcpp::List cgarchfilter(NumericVector residuals, NumericVector v, NumericMatrix initstate, NumericVector omega, NumericVector alpha, NumericVector rho, NumericVector phi, NumericVector beta, IntegerVector model);
RcppExport SEXP _tsgarch_cgarchfilter(SEXP residualsSEXP, SEXP vSEXP, SEXP initstateSEXP, SEXP omegaSEXP, SEXP alphaSEXP, SEXP rhoSEXP, SEXP phiSEXP, SEXP betaSEXP, SEXP modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type residuals(residualsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type initstate(initstateSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type model(modelSEXP);
    rcpp_result_gen = Rcpp::wrap(cgarchfilter(residuals, v, initstate, omega, alpha, rho, phi, beta, model));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_tsgarch_garchfilter", (DL_FUNC) &_tsgarch_garchfilter, 7},
    {"_tsgarch_egarchfilter", (DL_FUNC) &_tsgarch_egarchfilter, 9},
    {"_tsgarch_aparchfilter", (DL_FUNC) &_tsgarch_aparchfilter, 9},
    {"_tsgarch_gjrgarchfilter", (DL_FUNC) &_tsgarch_gjrgarchfilter, 9},
    {"_tsgarch_fgarchfilter", (DL_FUNC) &_tsgarch_fgarchfilter, 10},
    {"_tsgarch_cgarchfilter", (DL_FUNC) &_tsgarch_cgarchfilter, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_tsgarch(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
