// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// garchfilter
NumericVector garchfilter(const NumericVector residuals, const NumericVector v, const NumericVector initstate, const double omega, const NumericVector alpha, const NumericVector beta, const IntegerVector model);
RcppExport SEXP _tsgarch_garchfilter(SEXP residualsSEXP, SEXP vSEXP, SEXP initstateSEXP, SEXP omegaSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type residuals(residualsSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type initstate(initstateSEXP);
    Rcpp::traits::input_parameter< const double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type model(modelSEXP);
    rcpp_result_gen = Rcpp::wrap(garchfilter(residuals, v, initstate, omega, alpha, beta, model));
    return rcpp_result_gen;
END_RCPP
}
// egarchfilter
NumericVector egarchfilter(const NumericVector residuals, const NumericVector v, const NumericVector initstate, const double omega, const NumericVector alpha, const NumericVector gamma, const NumericVector beta, const double kappa, const IntegerVector model);
RcppExport SEXP _tsgarch_egarchfilter(SEXP residualsSEXP, SEXP vSEXP, SEXP initstateSEXP, SEXP omegaSEXP, SEXP alphaSEXP, SEXP gammaSEXP, SEXP betaSEXP, SEXP kappaSEXP, SEXP modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type residuals(residualsSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type initstate(initstateSEXP);
    Rcpp::traits::input_parameter< const double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type model(modelSEXP);
    rcpp_result_gen = Rcpp::wrap(egarchfilter(residuals, v, initstate, omega, alpha, gamma, beta, kappa, model));
    return rcpp_result_gen;
END_RCPP
}
// aparchfilter
NumericVector aparchfilter(const NumericVector residuals, const NumericVector v, const NumericVector initstate, const double omega, const NumericVector alpha, const NumericVector gamma, const NumericVector beta, const double delta, const IntegerVector model);
RcppExport SEXP _tsgarch_aparchfilter(SEXP residualsSEXP, SEXP vSEXP, SEXP initstateSEXP, SEXP omegaSEXP, SEXP alphaSEXP, SEXP gammaSEXP, SEXP betaSEXP, SEXP deltaSEXP, SEXP modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type residuals(residualsSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type initstate(initstateSEXP);
    Rcpp::traits::input_parameter< const double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type model(modelSEXP);
    rcpp_result_gen = Rcpp::wrap(aparchfilter(residuals, v, initstate, omega, alpha, gamma, beta, delta, model));
    return rcpp_result_gen;
END_RCPP
}
// gjrgarchfilter
NumericVector gjrgarchfilter(const NumericVector residuals, const NumericVector negative_indicator, const NumericVector v, const NumericVector initstate, const double omega, const NumericVector alpha, const NumericVector gamma, const NumericVector beta, const IntegerVector model);
RcppExport SEXP _tsgarch_gjrgarchfilter(SEXP residualsSEXP, SEXP negative_indicatorSEXP, SEXP vSEXP, SEXP initstateSEXP, SEXP omegaSEXP, SEXP alphaSEXP, SEXP gammaSEXP, SEXP betaSEXP, SEXP modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type residuals(residualsSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type negative_indicator(negative_indicatorSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type initstate(initstateSEXP);
    Rcpp::traits::input_parameter< const double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type model(modelSEXP);
    rcpp_result_gen = Rcpp::wrap(gjrgarchfilter(residuals, negative_indicator, v, initstate, omega, alpha, gamma, beta, model));
    return rcpp_result_gen;
END_RCPP
}
// fgarchfilter
NumericVector fgarchfilter(const NumericVector residuals, const NumericVector v, const NumericVector initstate, const double omega, const NumericVector alpha, const NumericVector gamma, const NumericVector eta, const NumericVector beta, const double delta, const IntegerVector model);
RcppExport SEXP _tsgarch_fgarchfilter(SEXP residualsSEXP, SEXP vSEXP, SEXP initstateSEXP, SEXP omegaSEXP, SEXP alphaSEXP, SEXP gammaSEXP, SEXP etaSEXP, SEXP betaSEXP, SEXP deltaSEXP, SEXP modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type residuals(residualsSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type initstate(initstateSEXP);
    Rcpp::traits::input_parameter< const double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type model(modelSEXP);
    rcpp_result_gen = Rcpp::wrap(fgarchfilter(residuals, v, initstate, omega, alpha, gamma, eta, beta, delta, model));
    return rcpp_result_gen;
END_RCPP
}
// cgarchfilter
Rcpp::List cgarchfilter(const NumericVector residuals, const NumericVector v, const NumericMatrix initstate, const double omega, const NumericVector alpha, const NumericVector rho, const NumericVector phi, const NumericVector beta, const IntegerVector model);
RcppExport SEXP _tsgarch_cgarchfilter(SEXP residualsSEXP, SEXP vSEXP, SEXP initstateSEXP, SEXP omegaSEXP, SEXP alphaSEXP, SEXP rhoSEXP, SEXP phiSEXP, SEXP betaSEXP, SEXP modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type residuals(residualsSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type initstate(initstateSEXP);
    Rcpp::traits::input_parameter< const double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type model(modelSEXP);
    rcpp_result_gen = Rcpp::wrap(cgarchfilter(residuals, v, initstate, omega, alpha, rho, phi, beta, model));
    return rcpp_result_gen;
END_RCPP
}
// garchsimvec
List garchsimvec(arma::mat& epsilon, arma::mat& sigma_sqr_sim, const arma::mat& z, const arma::vec& variance_intercept, const arma::mat& init, const arma::vec& alpha, const arma::vec& beta, const double mu, const arma::ivec& order);
RcppExport SEXP _tsgarch_garchsimvec(SEXP epsilonSEXP, SEXP sigma_sqr_simSEXP, SEXP zSEXP, SEXP variance_interceptSEXP, SEXP initSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP muSEXP, SEXP orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type sigma_sqr_sim(sigma_sqr_simSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type variance_intercept(variance_interceptSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type init(initSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type order(orderSEXP);
    rcpp_result_gen = Rcpp::wrap(garchsimvec(epsilon, sigma_sqr_sim, z, variance_intercept, init, alpha, beta, mu, order));
    return rcpp_result_gen;
END_RCPP
}
// egarchsimvec
List egarchsimvec(const arma::mat& z, arma::mat& sigma_log_sim, const arma::vec& variance_intercept, const arma::mat& init, const arma::vec& alpha, const arma::vec& gamma, const arma::vec& beta, const double kappa, const double mu, const arma::ivec& order);
RcppExport SEXP _tsgarch_egarchsimvec(SEXP zSEXP, SEXP sigma_log_simSEXP, SEXP variance_interceptSEXP, SEXP initSEXP, SEXP alphaSEXP, SEXP gammaSEXP, SEXP betaSEXP, SEXP kappaSEXP, SEXP muSEXP, SEXP orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type sigma_log_sim(sigma_log_simSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type variance_intercept(variance_interceptSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type init(initSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< const double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type order(orderSEXP);
    rcpp_result_gen = Rcpp::wrap(egarchsimvec(z, sigma_log_sim, variance_intercept, init, alpha, gamma, beta, kappa, mu, order));
    return rcpp_result_gen;
END_RCPP
}
// aparchsimvec
List aparchsimvec(arma::mat& epsilon, arma::mat& sigma_power_sim, const arma::mat& z, const arma::vec& variance_intercept, const arma::mat& init, const arma::vec& alpha, const arma::vec& gamma, const arma::vec& beta, const double delta, const double mu, const arma::ivec& order);
RcppExport SEXP _tsgarch_aparchsimvec(SEXP epsilonSEXP, SEXP sigma_power_simSEXP, SEXP zSEXP, SEXP variance_interceptSEXP, SEXP initSEXP, SEXP alphaSEXP, SEXP gammaSEXP, SEXP betaSEXP, SEXP deltaSEXP, SEXP muSEXP, SEXP orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type sigma_power_sim(sigma_power_simSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type variance_intercept(variance_interceptSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type init(initSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type order(orderSEXP);
    rcpp_result_gen = Rcpp::wrap(aparchsimvec(epsilon, sigma_power_sim, z, variance_intercept, init, alpha, gamma, beta, delta, mu, order));
    return rcpp_result_gen;
END_RCPP
}
// gjrsimvec
List gjrsimvec(arma::mat& epsilon, arma::mat& sigma_sqr_sim, const arma::mat& z, const arma::vec& variance_intercept, const arma::mat& init, const arma::vec& alpha, const arma::vec& gamma, const arma::vec& beta, const double mu, const arma::ivec& order);
RcppExport SEXP _tsgarch_gjrsimvec(SEXP epsilonSEXP, SEXP sigma_sqr_simSEXP, SEXP zSEXP, SEXP variance_interceptSEXP, SEXP initSEXP, SEXP alphaSEXP, SEXP gammaSEXP, SEXP betaSEXP, SEXP muSEXP, SEXP orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type sigma_sqr_sim(sigma_sqr_simSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type variance_intercept(variance_interceptSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type init(initSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type order(orderSEXP);
    rcpp_result_gen = Rcpp::wrap(gjrsimvec(epsilon, sigma_sqr_sim, z, variance_intercept, init, alpha, gamma, beta, mu, order));
    return rcpp_result_gen;
END_RCPP
}
// fgarchsimvec
List fgarchsimvec(arma::mat& epsilon, arma::mat& sigma_power_sim, const arma::mat& z, const arma::vec& variance_intercept, const arma::mat& init, const arma::vec& alpha, const arma::vec& gamma, const arma::vec& eta, const arma::vec& beta, const double delta, const double mu, const arma::ivec& order);
RcppExport SEXP _tsgarch_fgarchsimvec(SEXP epsilonSEXP, SEXP sigma_power_simSEXP, SEXP zSEXP, SEXP variance_interceptSEXP, SEXP initSEXP, SEXP alphaSEXP, SEXP gammaSEXP, SEXP etaSEXP, SEXP betaSEXP, SEXP deltaSEXP, SEXP muSEXP, SEXP orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type sigma_power_sim(sigma_power_simSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type variance_intercept(variance_interceptSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type init(initSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type order(orderSEXP);
    rcpp_result_gen = Rcpp::wrap(fgarchsimvec(epsilon, sigma_power_sim, z, variance_intercept, init, alpha, gamma, eta, beta, delta, mu, order));
    return rcpp_result_gen;
END_RCPP
}
// cgarchsimvec
List cgarchsimvec(arma::mat& epsilon, arma::mat& sigma_sqr_sim, const arma::mat& z, const arma::vec& variance_intercept, arma::mat& transitory_component_sim, arma::mat& permanent_component_sim, const arma::vec& alpha, const arma::vec& phi, const arma::vec& rho, const arma::vec& beta, const double mu, const arma::ivec& order);
RcppExport SEXP _tsgarch_cgarchsimvec(SEXP epsilonSEXP, SEXP sigma_sqr_simSEXP, SEXP zSEXP, SEXP variance_interceptSEXP, SEXP transitory_component_simSEXP, SEXP permanent_component_simSEXP, SEXP alphaSEXP, SEXP phiSEXP, SEXP rhoSEXP, SEXP betaSEXP, SEXP muSEXP, SEXP orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type sigma_sqr_sim(sigma_sqr_simSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type variance_intercept(variance_interceptSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type transitory_component_sim(transitory_component_simSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type permanent_component_sim(permanent_component_simSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type order(orderSEXP);
    rcpp_result_gen = Rcpp::wrap(cgarchsimvec(epsilon, sigma_sqr_sim, z, variance_intercept, transitory_component_sim, permanent_component_sim, alpha, phi, rho, beta, mu, order));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_tsgarch_garchfilter", (DL_FUNC) &_tsgarch_garchfilter, 7},
    {"_tsgarch_egarchfilter", (DL_FUNC) &_tsgarch_egarchfilter, 9},
    {"_tsgarch_aparchfilter", (DL_FUNC) &_tsgarch_aparchfilter, 9},
    {"_tsgarch_gjrgarchfilter", (DL_FUNC) &_tsgarch_gjrgarchfilter, 9},
    {"_tsgarch_fgarchfilter", (DL_FUNC) &_tsgarch_fgarchfilter, 10},
    {"_tsgarch_cgarchfilter", (DL_FUNC) &_tsgarch_cgarchfilter, 9},
    {"_tsgarch_garchsimvec", (DL_FUNC) &_tsgarch_garchsimvec, 9},
    {"_tsgarch_egarchsimvec", (DL_FUNC) &_tsgarch_egarchsimvec, 10},
    {"_tsgarch_aparchsimvec", (DL_FUNC) &_tsgarch_aparchsimvec, 11},
    {"_tsgarch_gjrsimvec", (DL_FUNC) &_tsgarch_gjrsimvec, 10},
    {"_tsgarch_fgarchsimvec", (DL_FUNC) &_tsgarch_fgarchsimvec, 12},
    {"_tsgarch_cgarchsimvec", (DL_FUNC) &_tsgarch_cgarchsimvec, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_tsgarch(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
